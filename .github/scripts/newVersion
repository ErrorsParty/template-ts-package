#!/usr/bin/env -S zx
$.verbose = false;

import getLatestVersion, {
	inc,
	parse,
	valid,
} from "./utils/getLatestVersion.mjs";

let text = "";
process.stdin.on("data", (data) => (text += data.toString("utf-8")));
await new Promise((resolve) => process.stdin.on("end", resolve));

/** @type {string[]} */
const messages = JSON.parse(text).commits.map((commit) =>
	commit.message.toLowerCase(),
);

const order = [
	"major",
	"minor",
	"patch",
	"premajor",
	"preminor",
	"prepatch",
	"prerelease",
];

let largestStep = "none";

l1: for (const message of messages) {
	for (const step of order) {
		if (message.indexOf(`#${step}`) !== -1) {
			if (largestStep === "none") largestStep = step;
			else {
				if (order.indexOf(largestStep) < order.indexOf(step)) {
					largestStep = step;
				}
			}
			break l1;
		}
	}
}

if (largestStep !== "none") {
	const latestVersion = await getLatestVersion(process.env.ORIGIN);
	if (!latestVersion) {
		console.log(
			"::set-output name=newVersion::%s",
			largestStep === "major" ? "1.0.0" : "0.1.0",
		);
	} else {
		console.log(
			"::set-output name=newVersion::%s",
			inc(latestVersion, largestStep, {
				includePrerelease: true,
				loose: true,
			}),
		);
	}
}
